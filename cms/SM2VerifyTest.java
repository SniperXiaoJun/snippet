package cms;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.math.BigInteger;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.SignatureException;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERApplicationSpecificParser;
import org.bouncycastle.asn1.BERTags;
import org.bouncycastle.asn1.DERApplicationSpecific;
import org.bouncycastle.asn1.DERPrintableString;
import org.bouncycastle.asn1.DERTags;
import org.bouncycastle.asn1.gm.GMObjectIdentifiers;
import org.bouncycastle.asn1.util.ASN1Dump;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSTypedData;
import org.bouncycastle.cms.SignerInformation;
import org.bouncycastle.cms.SignerInformationStore;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.crypto.params.ParametersWithID;
import org.bouncycastle.crypto.params.ParametersWithRandom;
import org.bouncycastle.crypto.signers.SM2Signer;
import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey;
import org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.util.CollectionStore;
import org.bouncycastle.util.test.TestRandomBigInteger;

import sun.misc.BASE64Decoder;
import sun.security.pkcs.ParsingException;

import com.szca.caau.webservice.util.CAUtil;
import com.szca.caau.webservice.util.FileUtil;
import com.szca.sm2.cms.CMSUtil;
import com.szca.sm2.cms.ExternalSignatureCMSSignedDataGenerator;
import com.szca.sm2.cms.ExternalSignatureSignerInfoGenerator;

public class SM2VerifyTest
{
    private static byte[] SM2_USER_ID = "1234567812345678".getBytes();

    static String privateStr = "MIICSwIBADCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA/////v////////////////////8AAAAA//////////8wRAQg/////v////////////////////8AAAAA//////////wEICjp+p6dn140TVqeS89lCafzl4n1FauPkt28vUFNlA6TBEEEMsSuLB8ZgRlfmQRGajnJlI/jC7/yZgvhcVpFiTNMdMe8Nzai9PZ3nFm9zuNraSFT0KmHfMYqR0AC3zLlITnwoAIhAP////7///////////////9yA99rIcYFK1O79Ak51UEjAgEBBIIBVTCCAVECAQEEIC0F1/K2RGgcrBJAABM6ElQw8W/qxFKv9xZAlwlrDTA5oIHjMIHgAgEBMCwGByqGSM49AQECIQD////+/////////////////////wAAAAD//////////zBEBCD////+/////////////////////wAAAAD//////////AQgKOn6np2fXjRNWp5Lz2UJp/OXifUVq4+S3by9QU2UDpMEQQQyxK4sHxmBGV+ZBEZqOcmUj+MLv/JmC+FxWkWJM0x0x7w3NqL09necWb3O42tpIVPQqYd8xipHQALfMuUhOfCgAiEA/////v///////////////3ID32shxgUrU7v0CTnVQSMCAQGhRANCAASY6WuiQ2X4x0pY+qon1IBD7l26wQgJ+QAU5ludnst8LKUsdgrBUS7gi0/FM+bHqQnTITShveQmyUA0loI3lYBp";
    static String publicKeyStr = "MIIBMzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA/////v////////////////////8AAAAA//////////8wRAQg/////v////////////////////8AAAAA//////////wEICjp+p6dn140TVqeS89lCafzl4n1FauPkt28vUFNlA6TBEEEMsSuLB8ZgRlfmQRGajnJlI/jC7/yZgvhcVpFiTNMdMe8Nzai9PZ3nFm9zuNraSFT0KmHfMYqR0AC3zLlITnwoAIhAP////7///////////////9yA99rIcYFK1O79Ak51UEjAgEBA0IABIX18y1okxcvuo0mdlIV24Qgju1j+S/EqGzcxdSgJR9/q19U4gCc37eTkLutntNIKrFNInXyDzuqdidB54pACK8=";
    
    public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, SignatureException, IOException, KeyStoreException, CertificateException
    {
//        Certificate certificate = CAUtil.getCfeformPfxForSM2("G:\\PROJECTS\\CA_PROJECTS\\qianhai\\SZCAJavaCAS\\src\\cert\\pfx_cert\\sm2.pfx", "123456");
//        System.out.println(Base64.encodeBase64String(certificate.getEncoded()));
//        String signed = "29chvs2gRxwReZtYJfq5Q+694QpRwIdKC6xOd6gMiaICpjKpaf5xuJIRnqReJ5uHh0Dxlara8z10wQq9bPDleQ==";
//        ByteArrayInputStream inStream = new ByteArrayInputStream(CAUtil.base64decode(signed));
//        byte[] decode = Base64.decodeBase64(signed);
//        System.out.println("length:"+decode.length);
//        ASN1InputStream asnInputStream = new ASN1InputStream(inStream);
//        
////        80527958882111619858163586570007856043309163325684187623998119542811316655888, 31413697264088912702285005498829187216810624166217488418821348528487088129419
//        boolean ff = verifySign(decode, "test".getBytes(), getPubKey());
    	String str1 = "MIIHPgYJKoZIhvcNAQcCoIIHLzCCBysCAQExADALBgkqhkiG9w0BBwGgggcTMIIC0DCCAjmgAwIBAgIIWd1E9c7skXUwDQYJKoZIhvcNAQEFBQAwezELMAkGA1UEBhMCQ04xEjAQBgNVBAgMCUd1YW5nZG9uZzERMA8GA1UEBwwIU2hlbnpoZW4xJzAlBgNVBAoMHlNoZW5aaGVuIENlcnRpZmljYXRlIEF1dGhvcml0eTENMAsGA1UECwwEc3pjYTENMAsGA1UEAwwEU1pDQTAeFw0xNzAyMTUwNjQwMDJaFw00NzAyMDgwNjQwMDJaMHsxCzAJBgNVBAYTAkNOMRIwEAYDVQQIDAlHdWFuZ2RvbmcxETAPBgNVBAcMCFNoZW56aGVuMScwJQYDVQQKDB5TaGVuWmhlbiBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxDTALBgNVBAsMBHN6Y2ExDTALBgNVBAMMBFNaQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJA3tMG+HMNntomNgzq1RCH6Yk4n6Xr3nDjPM9DGY37AosE08kVSKs9D8bx/YyYN5s45YUi5ivU0LjiN9CD2gQwiJOH6hjfj0FwovuEX+tSGenLOD1Vwnn8/dLmsAshzH+CxXb+q2MSarYTuS/4qmEdHb35eE+ACl1WQwouz4BWfAgMBAAGjXTBbMB8GA1UdIwQYMBaAFF7zeTVy2qREYgyiNesEPWbZwD3wMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBRe83k1ctqkRGIMojXrBD1m2cA98DANBgkqhkiG9w0BAQUFAAOBgQBrnGRGbNpEWM39Gc236TfNqopwvOnKXzjGuqt1eqw83f4rlQuBB3dm1rtSQn1vtsDJoITK6BHfDG3l9Ktsi2wEPPPP+eoF3DXIF/fXQyg91U1oC+IfeMPM6UCrVOdVJpLMECrsbWi5vGW2ASTxdzBweImrActvRwknuVob0Vx5";
    	String str2 = "MIIHPgYJKoZIhvcNAQcCoIIHLzCCBysCAQExADALBgkqhkiG9w0BBwGgggcTMIIC0DCCAjmgAwIBAgIIWd1E9c7skXUwDQYJKoZIhvcNAQEFBQAwezELMAkGA1UEBhMCQ04xEjAQBgNVBAgMCUd1YW5nZG9uZzERMA8GA1UEBwwIU2hlbnpoZW4xJzAlBgNVBAoMHlNoZW5aaGVuIENlcnRpZmljYXRlIEF1dGhvcml0eTENMAsGA1UECwwEc3pjYTENMAsGA1UEAwwEU1pDQTAeFw0xNzAyMTUwNjQwMDJaFw00NzAyMDgwNjQwMDJaMHsxCzAJBgNVBAYTAkNOMRIwEAYDVQQIDAlHdWFuZ2RvbmcxETAPBgNVBAcMCFNoZW56aGVuMScwJQYDVQQKDB5TaGVuWmhlbiBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxDTALBgNVBAsMBHN6Y2ExDTALBgNVBAMMBFNaQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJA3tMG+HMNntomNgzq1RCH6Yk4n6Xr3nDjPM9DGY37AosE08kVSKs9D8bx/YyYN5s45YUi5ivU0LjiN9CD2gQwiJOH6hjfj0FwovuEX+tSGenLOD1Vwnn8/dLmsAshzH+CxXb+q2MSarYTuS/4qmEdHb35eE+ACl1WQwouz4BWfAgMBAAGjXTBbMB8GA1UdIwQYMBaAFF7zeTVy2qREYgyiNesEPWbZwD3wMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBRe83k1ctqkRGIMojXrBD1m2cA98DANBgkqhkiG9w0BAQUFAAOBgQBrnGRGbNpEWM39Gc236TfNqopwvOnKXzjGuqt1eqw83f4rlQuBB3dm1rtSQn1vtsDJoITK6BHfDG3l9Ktsi2wEPPPP+eoF3DXIF/fXQyg91U1oC+IfeMPM6UCrVOdVJpLMECrsbWi5vGW2ASTxdzBweImrActvRwknuVob0Vx5";
    	
        System.out.println(str1.equalsIgnoreCase(str2));
    }
   
   public static boolean verifySign(byte[] signdatebyte, byte[] databyte,X509Certificate cert) throws NoSuchAlgorithmException, 
   InvalidKeyException, SignatureException, IOException{
       
       return verifySign(signdatebyte,databyte,cert.getPublicKey());
   }
   /**
    * PKCS1 验证
    * @param signdate
    *          签名值勤
    * @param data
    *          原文
    * @param cf
    *          签名的证书
    * @return
    *      true 正确
    *      false 错误
    * @throws NoSuchAlgorithmException
    * @throws InvalidKeyException
    * @throws SignatureException
    * @throws IOException 
    */
   public static boolean verifySign(byte[] signdatebyte, byte[] databyte,PublicKey publicKey) throws NoSuchAlgorithmException, 
   InvalidKeyException, SignatureException, IOException{
       SM2Signer localSM2Signer = new SM2Signer();
       Security.addProvider(new BouncyCastleProvider());
//       PublicKey publicKey = cert.getPublicKey();
       ECPublicKeyParameters param = null;
       
       if (publicKey instanceof BCECPublicKey)
       {
           BCECPublicKey localECPublicKey = (BCECPublicKey)publicKey;
           ECParameterSpec localECParameterSpec = localECPublicKey.getParameters();
           ECDomainParameters localECDomainParameters = new ECDomainParameters(localECParameterSpec.getCurve(),
           localECParameterSpec.getG(), localECParameterSpec.getN());
           param = new ECPublicKeyParameters(localECPublicKey.getQ(),localECDomainParameters);
       }
//       ByteArrayInputStream inStream = new ByteArrayInputStream(signdatebyte);
//       ASN1InputStream asnInputStream = new ASN1InputStream(inStream);
//       ASN1Primitive derObject = asnInputStream.readObject();
       BigInteger R = null;
       BigInteger S = null;
//       if (derObject instanceof ASN1Sequence) {  
//           ASN1Sequence signSequence = (ASN1Sequence) derObject;  
//           Enumeration<ASN1Integer> enumer = signSequence.getObjects();
//               R =  ((ASN1Integer)enumer.nextElement()).getValue();
//               S =  ((ASN1Integer)enumer.nextElement()).getValue();
//       }
       byte[] f1 = new byte[32];
       byte[] f2 = new byte[32];
       System.arraycopy(signdatebyte, 0, f1, 0, 32);
       System.arraycopy(signdatebyte, 32, f2, 0, signdatebyte.length-32);
       ParametersWithID parametersWithID = new ParametersWithID(param,SM2_USER_ID);
       localSM2Signer.init(false, parametersWithID);
       System.out.println(BigIntegerUtil.toPositiveInteger(f1));
       System.out.println(BigIntegerUtil.toPositiveInteger(f2));
       boolean res = localSM2Signer.verifySignature(databyte, BigIntegerUtil.toPositiveInteger(f1),
           BigIntegerUtil.toPositiveInteger(f2));
       return res;
   }
   
   
   @SuppressWarnings("unused")
    private static byte[] getByteArrayByFilePath(String filepath){
           
           FileChannel fc = null; 
           byte data[] = null;
           try {  
               fc = new RandomAccessFile(filepath, "r").getChannel();  
               MappedByteBuffer byteBuffer = fc.map(MapMode.READ_ONLY, 0,  
                       fc.size()).load();  
               data = new byte[(int) fc.size()];  
               if (byteBuffer.remaining() > 0) {  
                   byteBuffer.get(data, 0, byteBuffer.remaining());  
               }  
           } catch (IOException e) {  
               e.printStackTrace();  
           } finally {  
               try {
                   if(fc != null )
                   fc.close();  
               } catch (IOException e) {  
                   e.printStackTrace();  
               }  
           }
           return data;
     }
   
   

   private static PublicKey getPubKey() {
       PublicKey publicKey = null;
       try {
              String publicBase64 = publicKeyStr;
              java.security.spec.X509EncodedKeySpec bobPubKeySpec = new java.security.spec.X509EncodedKeySpec(
              new BASE64Decoder().decodeBuffer(publicBase64));
            KeyFactory keyFactory;
            keyFactory = java.security.KeyFactory.getInstance("EC", new BouncyCastleProvider());
            // 取公钥匙对象
            publicKey = keyFactory.generatePublic(bobPubKeySpec);
            System.out.println(publicKey);
       } catch (Exception e) {
        e.printStackTrace();
       }
       return publicKey;
      }
   
   private static PrivateKey getPrivateKey() {
       PrivateKey privateKey = null;
       try {
              String publicBase64 = privateStr;
              PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(new BASE64Decoder().decodeBuffer(publicBase64));
            KeyFactory keyFactory;
            keyFactory = java.security.KeyFactory.getInstance("EC", new BouncyCastleProvider());
            privateKey = keyFactory.generatePrivate(keySpec);
            System.out.println(privateKey);
            System.out.println(Base64.encodeBase64String((privateKey.getEncoded())).endsWith(publicBase64));
       } catch (Exception e) {
        e.printStackTrace();
       }
       return privateKey;
      }

}
